package ceui.pixiv.paging

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.databinding.ViewDataBinding
import androidx.lifecycle.LifecycleOwner
import androidx.paging.PagingDataAdapter
import androidx.viewbinding.ViewBinding
import ceui.lisa.databinding.ItemOnePxBinding
import ceui.pixiv.ui.common.ListItemHolder
import ceui.pixiv.ui.common.ListItemViewHolder
import ceui.pixiv.ui.common.listItemHolderDiffUtil
import ceui.pixiv.ui.viewholdermap.ViewHolderFactory


class CommonPagingAdapter(private val viewLifecycleOwner: LifecycleOwner) :
    PagingDataAdapter<ListItemHolder, ListItemViewHolder<ViewBinding, ListItemHolder>>(
        listItemHolderDiffUtil
    ) {
    override fun onCreateViewHolder(
        parent: ViewGroup,
        viewType: Int
    ): ListItemViewHolder<ViewBinding, ListItemHolder> {
        if (viewType == 0) {
            val binding = ItemOnePxBinding.inflate(
                LayoutInflater.from(parent.context),
                parent,
                false
            )
            return OnePxViewHolder(binding) as ListItemViewHolder<ViewBinding, ListItemHolder>
        }
        val autoGeneratedBuilder = ViewHolderFactory.VIEW_HOLDER_MAP[viewType]
        if (autoGeneratedBuilder == null) {
            throw RuntimeException("Add ItemHolder annotation")
        } else {
            return autoGeneratedBuilder.invoke(parent) as ListItemViewHolder<ViewBinding, ListItemHolder>
        }
    }

    override fun onBindViewHolder(
        holder: ListItemViewHolder<ViewBinding, ListItemHolder>,
        position: Int
    ) {
        val item = getItem(position)
        if (item != null) {
            holder.lifecycleOwner = viewLifecycleOwner
            if (holder.binding is ViewDataBinding) {
                holder.binding.lifecycleOwner = viewLifecycleOwner
            }
            holder.onBindViewHolder(item, position)
        }
    }

    override fun getItemViewType(position: Int): Int {
        val item = getItem(position)
        if (item != null) {
            return item.getItemViewType()
        }
        return super.getItemViewType(position)
    }
}