package ceui.pixiv.ui.common

import android.content.Context
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.databinding.ViewDataBinding
import androidx.lifecycle.LifecycleOwner
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import androidx.viewbinding.ViewBinding
import ceui.lisa.databinding.ItemOnePxBinding
import ceui.pixiv.paging.OnePxViewHolder
import ceui.pixiv.ui.viewholdermap.ViewHolderFactory
import timber.log.Timber

val listItemHolderDiffUtil = object :
    DiffUtil.ItemCallback<ListItemHolder>() {
    override fun areItemsTheSame(
        oldItem: ListItemHolder,
        newItem: ListItemHolder
    ): Boolean {
        return oldItem.areItemsTheSame(newItem)
    }

    override fun areContentsTheSame(
        oldItem: ListItemHolder,
        newItem: ListItemHolder
    ): Boolean {
        return oldItem.areContentsTheSame(newItem)
    }
}


class CommonAdapter(private val viewLifecycleOwner: LifecycleOwner) :
    ListAdapter<ListItemHolder, ListItemViewHolder<ViewBinding, ListItemHolder>>(
        listItemHolderDiffUtil
    ) {
    override fun onCreateViewHolder(
        parent: ViewGroup,
        viewType: Int
    ): ListItemViewHolder<ViewBinding, ListItemHolder> {
        if (viewType == 0) {
            val binding = ItemOnePxBinding.inflate(
                LayoutInflater.from(parent.context),
                parent,
                false
            )
            return OnePxViewHolder(binding) as ListItemViewHolder<ViewBinding, ListItemHolder>
        }
        val autoGeneratedBuilder = ViewHolderFactory.VIEW_HOLDER_MAP[viewType]
        if (autoGeneratedBuilder == null) {
            throw RuntimeException("Add ItemHolder annotation")
        } else {
            return autoGeneratedBuilder.invoke(parent) as ListItemViewHolder<ViewBinding, ListItemHolder>
        }
    }

    override fun onBindViewHolder(
        holder: ListItemViewHolder<ViewBinding, ListItemHolder>,
        position: Int
    ) {
        val item = getItem(position)
        holder.lifecycleOwner = viewLifecycleOwner
        if (holder.binding is ViewDataBinding) {
            holder.binding.lifecycleOwner = viewLifecycleOwner
        }
        holder.onBindViewHolder(item, position)
    }

    override fun getItemViewType(position: Int): Int {
        return getItem(position).getItemViewType() // use layout id to unique the item type
    }

    override fun getItemId(position: Int): Long {
        return getItem(position).getItemId()
    }
}

open class ListItemHolder {


    open fun areItemsTheSame(other: ListItemHolder): Boolean {
        return this.getItemId() == other.getItemId()
    }

    open fun areContentsTheSame(other: ListItemHolder): Boolean {
        return this.getItemId() == other.getItemId()
    }

    fun getItemViewType(): Int {
        Timber.d("dsdasadsw2 simpleName ${this::class.java.simpleName}")
        Timber.d("dsdasadsw2 hashCode ${this::class.java.hashCode()}")
        return this::class.java.hashCode()
    }

    open fun getItemId(): Long {
        return 0L
    }

    private var _onItemClick: ((View) -> Unit)? = null

    open fun onItemClick(block: (View) -> Unit): ListItemHolder {
        _onItemClick = block
        return this
    }

    fun retrieveClickListener(): ((View) -> Unit)? {
        return _onItemClick
    }
}

open class ListItemViewHolder<Binding : ViewBinding, T : ListItemHolder>(val binding: Binding) :
    RecyclerView.ViewHolder(binding.root) {

    protected val context: Context = binding.root.context
    lateinit var lifecycleOwner: LifecycleOwner

    open fun onBindViewHolder(holder: T, position: Int) {
        if (binding is ViewDataBinding) {
            binding.lifecycleOwner = lifecycleOwner
        }

        holder.retrieveClickListener()?.let { listener ->
            binding.root.setOnClickListener { sender ->
                try {
                    listener(sender)
                } catch (ex: Exception) {
                    Timber.e(ex)
                }
            }
        }
    }
}